{
    "props": [
        {
            "name": "modelValue",
            "optional": true,
            "readonly": false,
            "type": "number | number[]",
            "default": "",
            "description": "Value of the component."
        },
        {
            "name": "defaultValue",
            "optional": true,
            "readonly": false,
            "type": "number | number[]",
            "default": "",
            "description": "The default value for the input when not controlled by  `modelValue` ."
        },
        {
            "name": "name",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "The name attribute for the element, typically used in form submissions."
        },
        {
            "name": "min",
            "optional": true,
            "readonly": false,
            "type": "number",
            "default": "0",
            "description": "Mininum boundary value."
        },
        {
            "name": "max",
            "optional": true,
            "readonly": false,
            "type": "number",
            "default": "100",
            "description": "Maximum boundary value."
        },
        {
            "name": "orientation",
            "optional": true,
            "readonly": false,
            "type": "\"horizontal\" | \"vertical\"",
            "default": "horizontal",
            "description": "Orientation of the slider."
        },
        {
            "name": "step",
            "optional": true,
            "readonly": false,
            "type": "number",
            "default": "1",
            "description": "Step factor to increment/decrement the value."
        },
        {
            "name": "range",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When speficed, allows two boundary values to be picked."
        },
        {
            "name": "invalid",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When present, it specifies that the component should have invalid state style."
        },
        {
            "name": "disabled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When present, it specifies that the component should be disabled."
        },
        {
            "name": "tabindex",
            "optional": true,
            "readonly": false,
            "type": "number",
            "default": "",
            "description": "Index of the element in tabbing order."
        },
        {
            "name": "ariaLabelledby",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
        },
        {
            "name": "ariaLabel",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Used to define a string that labels the element."
        },
        {
            "name": "formControl",
            "optional": true,
            "readonly": false,
            "type": "Record<string, any>",
            "default": "",
            "description": "Form control object, typically used for handling validation and form state."
        },
        {
            "name": "dt",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "It generates scoped CSS variables using design tokens for the component."
        },
        {
            "name": "pt",
            "optional": true,
            "readonly": false,
            "type": "PassThrough<SliderPassThroughOptions>",
            "default": "",
            "description": "Used to pass attributes to DOM elements inside the component."
        },
        {
            "name": "ptOptions",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Used to configure passthrough(pt) options of the component."
        },
        {
            "name": "unstyled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When enabled, it removes component related styles in the core."
        }
    ],
    "slots": [],
    "emits": [
        {
            "name": "update:modelValue",
            "parameters": [
                {
                    "name": "value",
                    "optional": false,
                    "type": "number | number[]",
                    "description": "New value."
                }
            ],
            "returnType": "void",
            "description": "Emitted when the value changes."
        },
        {
            "name": "value-change",
            "parameters": [
                {
                    "name": "value",
                    "optional": false,
                    "type": "number | number[]",
                    "description": "New value."
                }
            ],
            "returnType": "void",
            "description": "Emitted when the value changes in uncontrolled mode."
        },
        {
            "name": "change",
            "parameters": [
                {
                    "name": "value",
                    "optional": false,
                    "type": "number",
                    "description": "New value"
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke on value change."
        },
        {
            "name": "slideend",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "SliderSlideEndEvent",
                    "description": "Custom slide end event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when slide ends."
        }
    ],
    "template": "\n<Slider v-model=\"value\" class=\"w-56\" />\n"
}