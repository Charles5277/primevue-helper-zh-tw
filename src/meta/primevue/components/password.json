{
    "props": [
        {
            "name": "modelValue",
            "optional": true,
            "readonly": false,
            "type": "Nullable<string>",
            "default": "",
            "description": "Value of the component."
        },
        {
            "name": "promptLabel",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Text to prompt password entry. Defaults to PrimeVue Locale configuration."
        },
        {
            "name": "mediumRegex",
            "optional": true,
            "readonly": false,
            "type": "string | RegExp",
            "default": "^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})",
            "description": "Regex for a medium level password."
        },
        {
            "name": "strongRegex",
            "optional": true,
            "readonly": false,
            "type": "string | RegExp",
            "default": "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})",
            "description": "Regex for a strong level password."
        },
        {
            "name": "weakLabel",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Text for a weak password. Defaults to PrimeVue Locale configuration."
        },
        {
            "name": "mediumLabel",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Text for a medium password. Defaults to PrimeVue Locale configuration."
        },
        {
            "name": "strongLabel",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Text for a strong password. Defaults to PrimeVue Locale configuration."
        },
        {
            "name": "feedback",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "true",
            "description": "Whether to show the strength indicator or not."
        },
        {
            "name": "appendTo",
            "optional": true,
            "readonly": false,
            "type": "HintedString<\"body\" | \"self\"> | HTMLElement",
            "default": "body",
            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
        },
        {
            "name": "toggleMask",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Whether to show an icon to display the password as plain text."
        },
        {
            "name": "maskIcon",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Icon to hide displaying the password as plain text."
        },
        {
            "name": "unmaskIcon",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Icon to show displaying the password as plain text."
        },
        {
            "name": "invalid",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When present, it specifies that the component should have invalid state style."
        },
        {
            "name": "disabled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When present, it specifies that the component should be disabled."
        },
        {
            "name": "variant",
            "optional": true,
            "readonly": false,
            "type": "\"outlined\" | \"filled\"",
            "default": "outlined",
            "description": "Specifies the input variant of the component."
        },
        {
            "name": "placeholder",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Placeholder text for the input."
        },
        {
            "name": "required",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When present, it specifies that an input field must be filled out before submitting the form."
        },
        {
            "name": "fluid",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "null",
            "description": "Spans 100% width of the container when enabled."
        },
        {
            "name": "inputId",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Identifier of the underlying input element."
        },
        {
            "name": "inputStyle",
            "optional": true,
            "readonly": false,
            "type": "object",
            "default": "",
            "description": "Inline style of the input field."
        },
        {
            "name": "inputClass",
            "optional": true,
            "readonly": false,
            "type": "string | object",
            "default": "",
            "description": "Style class of the input field."
        },
        {
            "name": "inputProps",
            "optional": true,
            "readonly": false,
            "type": "InputHTMLAttributes",
            "default": "",
            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
        },
        {
            "name": "panelId",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Identifier of the underlying overlay panel element."
        },
        {
            "name": "panelClass",
            "optional": true,
            "readonly": false,
            "type": "string | object",
            "default": "",
            "description": "Style class of the overlay panel."
        },
        {
            "name": "panelStyle",
            "optional": true,
            "readonly": false,
            "type": "object",
            "default": "",
            "description": "Inline style of the overlay panel."
        },
        {
            "name": "panelProps",
            "optional": true,
            "readonly": false,
            "type": "HTMLAttributes",
            "default": "",
            "description": "Used to pass all properties of the HTMLDivElement to the overlay panel inside the component."
        },
        {
            "name": "overlayId",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Identifier of the underlying overlay element."
        },
        {
            "name": "overlayClass",
            "optional": true,
            "readonly": false,
            "type": "string | object",
            "default": "",
            "description": "Style class of the overlay."
        },
        {
            "name": "overlayStyle",
            "optional": true,
            "readonly": false,
            "type": "object",
            "default": "",
            "description": "Inline style of the overlay."
        },
        {
            "name": "overlayProps",
            "optional": true,
            "readonly": false,
            "type": "HTMLAttributes",
            "default": "",
            "description": "Used to pass all properties of the HTMLDivElement to the overlay inside the component."
        },
        {
            "name": "ariaLabelledby",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
        },
        {
            "name": "ariaLabel",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Establishes a string value that labels the component."
        },
        {
            "name": "dt",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "It generates scoped CSS variables using design tokens for the component."
        },
        {
            "name": "pt",
            "optional": true,
            "readonly": false,
            "type": "PassThrough<PasswordPassThroughOptions>",
            "default": "",
            "description": "Used to pass attributes to DOM elements inside the component."
        },
        {
            "name": "ptOptions",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Used to configure passthrough(pt) options of the component."
        },
        {
            "name": "unstyled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When enabled, it removes component related styles in the core."
        }
    ],
    "slots": [
        {
            "name": "header",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom header template."
        },
        {
            "name": "footer",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom footer template."
        },
        {
            "name": "content",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom content template."
        },
        {
            "name": "hideicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Mask icon click event</span>\n}",
                    "description": "hideicon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "",
            "deprecated": "since v4.0. Use 'maskicon' slot instead.\nCustom mask icon template."
        },
        {
            "name": "maskicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Mask icon click event</span>\n}",
                    "description": "maskicon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom hide icon template."
        },
        {
            "name": "showicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Unmask icon click event</span>\n}",
                    "description": "showicon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "",
            "deprecated": "since v4.0. use 'unmaskicon' slot instead.\nCustom unmask icon template."
        },
        {
            "name": "unmaskicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Unmask icon click event</span>\n}",
                    "description": "showicon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom unmask icon template."
        }
    ],
    "emits": [
        {
            "name": "update:modelValue",
            "parameters": [
                {
                    "name": "value",
                    "optional": false,
                    "type": "string",
                    "description": "New value."
                }
            ],
            "returnType": "void",
            "description": "Emitted when the value changes."
        },
        {
            "name": "change",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "Event",
                    "description": "Browser event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke on value change."
        }
    ],
    "template": "\n<Password v-model=\"value\" :feedback=\"false\" />\n"
}