{
    "props": [
        {
            "name": "model",
            "optional": true,
            "readonly": false,
            "type": "MenuItem[]",
            "default": "",
            "description": "MenuModel instance to define the action items."
        },
        {
            "name": "position",
            "optional": true,
            "readonly": false,
            "type": "\"left\" | \"right\" | \"top\" | \"bottom\"",
            "default": "bottom",
            "description": "Position of element."
        },
        {
            "name": "class",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Style class of the element."
        },
        {
            "name": "style",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Inline style of the element."
        },
        {
            "name": "breakpoint",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "960px",
            "description": "The breakpoint to define the maximum width boundary."
        },
        {
            "name": "tooltipOptions",
            "optional": true,
            "readonly": false,
            "type": "DockTooltipOptions",
            "default": "",
            "description": "Whether to display the tooltip on items. The modifiers of Tooltip can be used like an object in it. Valid keys are 'event' and 'position'."
        },
        {
            "name": "menuId",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Unique identifier of the menu."
        },
        {
            "name": "tabindex",
            "optional": true,
            "readonly": false,
            "type": "string | number",
            "default": "",
            "description": "Index of the element in tabbing order."
        },
        {
            "name": "ariaLabelledby",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
        },
        {
            "name": "ariaLabel",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Establishes a string value that labels the component."
        },
        {
            "name": "dt",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "It generates scoped CSS variables using design tokens for the component."
        },
        {
            "name": "pt",
            "optional": true,
            "readonly": false,
            "type": "PassThrough<DockPassThroughOptions>",
            "default": "",
            "description": "Used to pass attributes to DOM elements inside the component."
        },
        {
            "name": "ptOptions",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Used to configure passthrough(pt) options of the component."
        },
        {
            "name": "unstyled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When enabled, it removes component related styles in the core."
        }
    ],
    "slots": [
        {
            "name": "item",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Custom content for item.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">DockRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                    "description": "item slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom item content."
        },
        {
            "name": "icon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Custom content for item icon.</span>\n }",
                    "description": "item icon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "",
            "deprecated": "since v4.0. Use 'itemicon' slot.\nCustom icon content."
        },
        {
            "name": "itemicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Custom content for item icon.</span>\n }",
                    "description": "item icon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom icon content."
        }
    ],
    "emits": [
        {
            "name": "focus",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "Event",
                    "description": "Browser event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when the component receives focus."
        },
        {
            "name": "blur",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "Event",
                    "description": "Browser event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when the component loses focus."
        }
    ],
    "template": "\n<Dock :model=\"items\" :position=\"position\">\n    <template #itemicon=\"{ item }\">\n        <img v-tooltip.top=\"item.label\" :alt=\"item.label\" :src=\"item.icon\" style=\"width: 100%\" />\n    </template>\n</Dock>\n"
}