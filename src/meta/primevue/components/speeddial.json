{
    "props": [
        {
            "name": "model",
            "optional": true,
            "readonly": false,
            "type": "MenuItem[]",
            "default": "",
            "description": "MenuModel instance to define the action items."
        },
        {
            "name": "visible",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Specifies the visibility of the overlay."
        },
        {
            "name": "direction",
            "optional": true,
            "readonly": false,
            "type": "\"left\" | \"right\" | \"up\" | \"down\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\"",
            "default": "up",
            "description": "Specifies the opening direction of actions."
        },
        {
            "name": "transitionDelay",
            "optional": true,
            "readonly": false,
            "type": "number",
            "default": "30",
            "description": "Transition delay step for each action item."
        },
        {
            "name": "type",
            "optional": true,
            "readonly": false,
            "type": "\"circle\" | \"linear\" | \"semi-circle\" | \"quarter-circle\"",
            "default": "linear",
            "description": "Specifies the opening type of actions."
        },
        {
            "name": "radius",
            "optional": true,
            "readonly": false,
            "type": "number",
            "default": "0",
            "description": "Radius for *circle types."
        },
        {
            "name": "mask",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Whether to show a mask element behind the speeddial."
        },
        {
            "name": "disabled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Whether the component is disabled."
        },
        {
            "name": "hideOnClickOutside",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "true",
            "description": "Whether the actions close when clicked outside."
        },
        {
            "name": "buttonClass",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Style class of the button element."
        },
        {
            "name": "maskStyle",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Inline style of the mask element."
        },
        {
            "name": "maskClass",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Style class of the mask element."
        },
        {
            "name": "showIcon",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Show icon of the button element."
        },
        {
            "name": "hideIcon",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Hide icon of the button element."
        },
        {
            "name": "rotateAnimation",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "true",
            "description": "Defined to rotate showIcon when hideIcon is not present."
        },
        {
            "name": "class",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Style class of the element."
        },
        {
            "name": "style",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Inline style of the element."
        },
        {
            "name": "tooltipOptions",
            "optional": true,
            "readonly": false,
            "type": "SpeedDialTooltipOptions",
            "default": "",
            "description": "Whether to display the tooltip on items. The modifiers of Tooltip can be used like an object in it. Valid keys are 'event' and 'position'."
        },
        {
            "name": "buttonProps",
            "optional": true,
            "readonly": false,
            "type": "object",
            "default": "",
            "description": "Used to pass all properties of the ButtonProps to the button component."
        },
        {
            "name": "actionButtonProps",
            "optional": true,
            "readonly": false,
            "type": "object",
            "default": "",
            "description": "Used to pass all properties of the ButtonProps to the item component."
        },
        {
            "name": "ariaLabel",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Defines a string value that labels an interactive list element."
        },
        {
            "name": "ariaLabelledby",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Identifier of the underlying list element."
        },
        {
            "name": "dt",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "It generates scoped CSS variables using design tokens for the component."
        },
        {
            "name": "pt",
            "optional": true,
            "readonly": false,
            "type": "PassThrough<SpeedDialPassThroughOptions>",
            "default": "",
            "description": "Used to pass attributes to DOM elements inside the component."
        },
        {
            "name": "ptOptions",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Used to configure passthrough(pt) options of the component."
        },
        {
            "name": "unstyled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When enabled, it removes component related styles in the core."
        }
    ],
    "slots": [
        {
            "name": "item",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">onClick</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Item click function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Button click function</span>\n}",
                    "description": "item slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom content for each item."
        },
        {
            "name": "button",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">visible</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Visible state of the item</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Button click function</span>\n}",
                    "description": "button slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom button template."
        },
        {
            "name": "icon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">visible</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Visible state of the item</span>\n }",
                    "description": "icon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom icon template."
        },
        {
            "name": "itemicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon template</span>\n }",
                    "description": "icon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom icon template."
        }
    ],
    "emits": [
        {
            "name": "click",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "Event",
                    "description": "Browser event."
                }
            ],
            "returnType": "void",
            "description": "Fired when the button element clicked."
        },
        {
            "name": "show",
            "parameters": [],
            "returnType": "void",
            "description": "Fired when the actions are visible."
        },
        {
            "name": "hide",
            "parameters": [],
            "returnType": "void",
            "description": "Fired when the actions are hidden."
        },
        {
            "name": "focus",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "Event",
                    "description": "Browser event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when the component receives focus."
        },
        {
            "name": "blur",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "Event",
                    "description": "Browser event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when the component loses focus."
        }
    ],
    "template": "\n<SpeedDial aria-label=\"Options\" />\n"
}