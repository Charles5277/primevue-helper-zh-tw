{
    "props": [
        {
            "name": "value",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Value to display inside the tag."
        },
        {
            "name": "severity",
            "optional": true,
            "readonly": false,
            "type": "HintedString<\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\">",
            "default": "",
            "description": "Severity type of the tag."
        },
        {
            "name": "rounded",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Whether the corners of the tag are rounded."
        },
        {
            "name": "icon",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Icon of the tag to display next to the value."
        },
        {
            "name": "dt",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "It generates scoped CSS variables using design tokens for the component."
        },
        {
            "name": "pt",
            "optional": true,
            "readonly": false,
            "type": "PassThrough<TagPassThroughOptions>",
            "default": "",
            "description": "Used to pass attributes to DOM elements inside the component."
        },
        {
            "name": "ptOptions",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Used to configure passthrough(pt) options of the component."
        },
        {
            "name": "unstyled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When enabled, it removes component related styles in the core."
        }
    ],
    "slots": [
        {
            "name": "default",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom content template"
        },
        {
            "name": "icon",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom icon template"
        }
    ],
    "emits": [],
    "template": "\n<Tag value=\"New\"></Tag>\n"
}