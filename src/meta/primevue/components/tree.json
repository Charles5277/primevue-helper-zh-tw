{
    "props": [
        {
            "name": "value",
            "optional": true,
            "readonly": false,
            "type": "TreeNode[]",
            "default": "",
            "description": "An array of treenodes."
        },
        {
            "name": "expandedKeys",
            "optional": true,
            "readonly": false,
            "type": "TreeExpandedKeys",
            "default": "",
            "description": "A map of keys to represent the expansion state in controlled mode."
        },
        {
            "name": "selectionKeys",
            "optional": true,
            "readonly": false,
            "type": "TreeSelectionKeys",
            "default": "",
            "description": "A map of keys to control the selection state."
        },
        {
            "name": "selectionMode",
            "optional": true,
            "readonly": false,
            "type": "\"single\" | \"multiple\" | \"checkbox\"",
            "default": "",
            "description": "Defines the selection mode."
        },
        {
            "name": "metaKeySelection",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
        },
        {
            "name": "loading",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Whether to display loading indicator."
        },
        {
            "name": "loadingIcon",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Icon to display when tree is loading."
        },
        {
            "name": "loadingMode",
            "optional": true,
            "readonly": false,
            "type": "\"mask\" | \"icon\"",
            "default": "mask",
            "description": "Loading mode display."
        },
        {
            "name": "filter",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When specified, displays an input field to filter the items."
        },
        {
            "name": "filterBy",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "label",
            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
        },
        {
            "name": "filterMode",
            "optional": true,
            "readonly": false,
            "type": "\"lenient\" | \"strict\"",
            "default": "lenient",
            "description": "Mode for filtering."
        },
        {
            "name": "filterPlaceholder",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Placeholder text to show when filter input is empty."
        },
        {
            "name": "filterLocale",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
        },
        {
            "name": "highlightOnSelect",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Highlights automatically the first item."
        },
        {
            "name": "scrollHeight",
            "optional": true,
            "readonly": false,
            "type": "HintedString<\"flex\">",
            "default": "",
            "description": "Height of the scroll viewport in fixed units or the 'flex' keyword for a dynamic size."
        },
        {
            "name": "ariaLabel",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Defines a string value that labels an interactive element."
        },
        {
            "name": "ariaLabelledby",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Identifier of the underlying menu element."
        },
        {
            "name": "dt",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "It generates scoped CSS variables using design tokens for the component."
        },
        {
            "name": "pt",
            "optional": true,
            "readonly": false,
            "type": "PassThrough<TreePassThroughOptions<any>>",
            "default": "",
            "description": "Used to pass attributes to DOM elements inside the component."
        },
        {
            "name": "ptOptions",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Used to configure passthrough(pt) options of the component."
        },
        {
            "name": "unstyled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When enabled, it removes component related styles in the core."
        }
    ],
    "slots": [
        {
            "name": "default",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n }"
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Default content slot."
        },
        {
            "name": "loadingicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                    "description": "loadingicon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom loading icon template."
        },
        {
            "name": "searchicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                    "description": "searchicon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "",
            "deprecated": "since v4.0. Use 'filtericon' slot instead.\nCustom search icon template."
        },
        {
            "name": "filtericon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                    "description": "filtericon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom search icon template."
        },
        {
            "name": "togglericon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Expanded state of the node</span>\n }",
                    "description": "toggleicon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "",
            "deprecated": "since v4.0. Use 'nodetoggleicon' slot instead.\nCustom toggle icon template."
        },
        {
            "name": "nodetogglericon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Expanded state of the node</span>\n }",
                    "description": "toggleicon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "",
            "deprecated": "since v4.0. Use 'nodetoggleicon' slot instead.\nCustom node toggle icon template."
        },
        {
            "name": "nodetoggleicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Expanded state of the node</span>\n }",
                    "description": "toggleicon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom node toggle icon template."
        },
        {
            "name": "nodeicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                    "description": "nodeicon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom node icon template."
        },
        {
            "name": "checkboxicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Check state of the node</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">partialChecked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Partial check state of the node</span>\n }",
                    "description": "checkboxicon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom checkbox icon"
        }
    ],
    "emits": [
        {
            "name": "update:expandedKeys",
            "parameters": [
                {
                    "name": "value",
                    "optional": false,
                    "type": "TreeExpandedKeys",
                    "description": "New expanded keys."
                }
            ],
            "returnType": "void",
            "description": "Emitted when the expanded keys change."
        },
        {
            "name": "update:selectionKeys",
            "parameters": [
                {
                    "name": "value",
                    "optional": false,
                    "type": "TreeSelectionKeys",
                    "description": "New selection keys."
                }
            ],
            "returnType": "void",
            "description": "Emitted when the selection keys change."
        },
        {
            "name": "node-select",
            "parameters": [
                {
                    "name": "node",
                    "optional": false,
                    "type": "TreeNode",
                    "description": "Node instance."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when a node is selected."
        },
        {
            "name": "node-unselect",
            "parameters": [
                {
                    "name": "node",
                    "optional": false,
                    "type": "TreeNode",
                    "description": "Node instance."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when a node is unselected."
        },
        {
            "name": "node-expand",
            "parameters": [
                {
                    "name": "node",
                    "optional": false,
                    "type": "TreeNode",
                    "description": "Node instance."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when a node is expanded."
        },
        {
            "name": "node-collapse",
            "parameters": [
                {
                    "name": "node",
                    "optional": false,
                    "type": "TreeNode",
                    "description": "Node instance."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when a node is collapsed."
        },
        {
            "name": "filter",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "TreeFilterEvent",
                    "description": "Custom filter event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke on filter input."
        }
    ],
    "template": "\n<Tree :value=\"nodes\" class=\"w-full md:w-[30rem]\"></Tree>\n"
}