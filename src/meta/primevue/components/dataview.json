{
    "props": [
        {
            "name": "value",
            "optional": true,
            "readonly": false,
            "type": "any[]",
            "default": "",
            "description": "An array of objects to display."
        },
        {
            "name": "layout",
            "optional": true,
            "readonly": false,
            "type": "\"list\" | \"grid\"",
            "default": "list",
            "description": "Layout of the items, valid values are 'list' and 'grid'."
        },
        {
            "name": "rows",
            "optional": true,
            "readonly": false,
            "type": "number",
            "default": "0",
            "description": "Number of rows to display per page."
        },
        {
            "name": "first",
            "optional": true,
            "readonly": false,
            "type": "number",
            "default": "0",
            "description": "Index of the first record to render."
        },
        {
            "name": "totalRecords",
            "optional": true,
            "readonly": false,
            "type": "number",
            "default": "",
            "description": "Number of total records, defaults to length of value when not defined."
        },
        {
            "name": "paginator",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When specified as true, enables the pagination."
        },
        {
            "name": "paginatorPosition",
            "optional": true,
            "readonly": false,
            "type": "\"top\" | \"bottom\" | \"both\"",
            "default": "bottom",
            "description": "Position of the paginator, options are 'top','bottom' or 'both'."
        },
        {
            "name": "alwaysShowPaginator",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "true",
            "description": "Whether to show it even there is only one page."
        },
        {
            "name": "paginatorTemplate",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
            "description": "Template of the paginator. It can be customized using the template property using the predefined keys,\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
        },
        {
            "name": "pageLinkSize",
            "optional": true,
            "readonly": false,
            "type": "number",
            "default": "5",
            "description": "Number of page links to display."
        },
        {
            "name": "rowsPerPageOptions",
            "optional": true,
            "readonly": false,
            "type": "number[]",
            "default": "",
            "description": "Array of integer values to display inside rows per page dropdown."
        },
        {
            "name": "currentPageReportTemplate",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "'({currentPage} of {totalPages})'",
            "description": "Template of the current page report element. It displays information about the pagination state.\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
        },
        {
            "name": "sortField",
            "optional": true,
            "readonly": false,
            "type": "string | Function",
            "default": "",
            "description": "Property name or a getter function of data to use in sorting by default."
        },
        {
            "name": "sortOrder",
            "optional": true,
            "readonly": false,
            "type": "number",
            "default": "",
            "description": "Order to sort the data by default."
        },
        {
            "name": "lazy",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Defines if data is loaded and interacted with in lazy manner."
        },
        {
            "name": "dataKey",
            "optional": false,
            "readonly": false,
            "type": "undefined | string",
            "default": "",
            "description": "Name of the data that uniquely identifies the a record in the data."
        },
        {
            "name": "dt",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "It generates scoped CSS variables using design tokens for the component."
        },
        {
            "name": "pt",
            "optional": true,
            "readonly": false,
            "type": "PassThrough<DataViewPassThroughOptions>",
            "default": "",
            "description": "Used to pass attributes to DOM elements inside the component."
        },
        {
            "name": "ptOptions",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Used to configure passthrough(pt) options of the component."
        },
        {
            "name": "unstyled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When enabled, it removes component related styles in the core."
        }
    ],
    "slots": [
        {
            "name": "header",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom header template."
        },
        {
            "name": "footer",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom footer template."
        },
        {
            "name": "empty",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">layout</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Layout of the items.</span>\n }",
                    "description": "empty slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom empty template."
        },
        {
            "name": "paginatorcontainer",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom paginator container template."
        },
        {
            "name": "paginatorstart",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom paginator start template."
        },
        {
            "name": "paginatorend",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom paginator end template."
        },
        {
            "name": "list",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n }",
                    "description": "list slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom list template."
        },
        {
            "name": "grid",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n }",
                    "description": "list slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom list template."
        }
    ],
    "emits": [
        {
            "name": "update:first",
            "parameters": [
                {
                    "name": "value",
                    "optional": false,
                    "type": "number",
                    "description": "New value."
                }
            ],
            "returnType": "void",
            "description": "Emitted when the first changes."
        },
        {
            "name": "update:rows",
            "parameters": [
                {
                    "name": "value",
                    "optional": false,
                    "type": "number",
                    "description": "New value."
                }
            ],
            "returnType": "void",
            "description": "Emitted when the rows changes."
        },
        {
            "name": "page",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "DataViewPageEvent",
                    "description": "Custom page event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when page changes, the event object contains information about the new state."
        }
    ],
    "template": "\n<DataView :value=\"products\">\n    <template #list=\"slotProps\">\n        <div class=\"flex flex-col\">\n            <div v-for=\"(item, index) in slotProps.items\" :key=\"index\">\n                <div class=\"flex flex-col sm:flex-row sm:items-center p-6 gap-4\" :class=\"{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }\">\n                    <div class=\"md:w-40 relative\">\n                        <img class=\"block xl:block mx-auto rounded w-full\" :src=\"`https://primefaces.org/cdn/primevue/images/product/${item.image}`\" :alt=\"item.name\" />\n                        <div class=\"absolute bg-black/70 rounded-border\" style=\"left: 4px; top: 4px\">\n                            <Tag :value=\"item.inventoryStatus\" :severity=\"getSeverity(item)\"></Tag>\n                        </div>\n                    </div>\n                    <div class=\"flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6\">\n                        <div class=\"flex flex-row md:flex-col justify-between items-start gap-2\">\n                            <div>\n                                <span class=\"font-medium text-surface-500 dark:text-surface-400 text-sm\">{{ item.category }}</span>\n                                <div class=\"text-lg font-medium mt-2\">{{ item.name }}</div>\n                            </div>\n                            <div class=\"bg-surface-100 p-1\" style=\"border-radius: 30px\">\n                                <div class=\"bg-surface-0 flex items-center gap-2 justify-center py-1 px-2\" style=\"border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)\">\n                                    <span class=\"text-surface-900 font-medium text-sm\">{{ item.rating }}</span>\n                                    <i class=\"pi pi-star-fill text-yellow-500\"></i>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"flex flex-col md:items-end gap-8\">\n                            <span class=\"text-xl font-semibold\">${{ item.price }}</span>\n                            <div class=\"flex flex-row-reverse md:flex-row gap-2\">\n                                <Button icon=\"pi pi-heart\" outlined></Button>\n                                <Button icon=\"pi pi-shopping-cart\" label=\"Buy Now\" :disabled=\"item.inventoryStatus === 'OUTOFSTOCK'\" class=\"flex-auto md:flex-initial whitespace-nowrap\"></Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n</DataView>\n"
}