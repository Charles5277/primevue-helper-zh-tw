{
    "props": [
        {
            "name": "modelValue",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Value of the component."
        },
        {
            "name": "options",
            "optional": true,
            "readonly": false,
            "type": "any[]",
            "default": "",
            "description": "An array of select items to display as the available options."
        },
        {
            "name": "optionLabel",
            "optional": true,
            "readonly": false,
            "type": "string | Function",
            "default": "",
            "description": "Property name or getter function to use as the label of an option."
        },
        {
            "name": "optionValue",
            "optional": true,
            "readonly": false,
            "type": "string | Function",
            "default": "",
            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
        },
        {
            "name": "optionDisabled",
            "optional": true,
            "readonly": false,
            "type": "string | Function",
            "default": "",
            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
        },
        {
            "name": "optionGroupLabel",
            "optional": true,
            "readonly": false,
            "type": "string | Function",
            "default": "",
            "description": "Property name or getter function to use as the label of an option group."
        },
        {
            "name": "optionGroupChildren",
            "optional": true,
            "readonly": false,
            "type": "string | Function",
            "default": "",
            "description": "Property name or getter function that refers to the children options of option group."
        },
        {
            "name": "scrollHeight",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "14rem",
            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
        },
        {
            "name": "filter",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When specified, displays a filter input at header."
        },
        {
            "name": "filterPlaceholder",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Placeholder text to show when filter input is empty."
        },
        {
            "name": "filterLocale",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
        },
        {
            "name": "filterMatchMode",
            "optional": true,
            "readonly": false,
            "type": "HintedString<\"startsWith\" | \"contains\" | \"endsWith\">",
            "default": "contains",
            "description": "Defines the filtering algorithm to use when searching the options."
        },
        {
            "name": "filterFields",
            "optional": true,
            "readonly": false,
            "type": "string[]",
            "default": "",
            "description": "Fields used when filtering the options, defaults to optionLabel."
        },
        {
            "name": "editable",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When present, custom value instead of predefined options can be entered using the editable input field."
        },
        {
            "name": "placeholder",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Default text to display when no option is selected."
        },
        {
            "name": "invalid",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When present, it specifies that the component should have invalid state style."
        },
        {
            "name": "disabled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When present, it specifies that the component should be disabled."
        },
        {
            "name": "variant",
            "optional": true,
            "readonly": false,
            "type": "\"outlined\" | \"filled\"",
            "default": "outlined",
            "description": "Specifies the input variant of the component."
        },
        {
            "name": "dataKey",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "A property to uniquely identify an option."
        },
        {
            "name": "showClear",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When enabled, a clear icon is displayed to clear the value."
        },
        {
            "name": "fluid",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "null",
            "description": "Spans 100% width of the container when enabled."
        },
        {
            "name": "inputId",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "",
            "deprecated": "since v4.0. Use 'labelId' instead.\nIdentifier of the underlying input element."
        },
        {
            "name": "inputStyle",
            "optional": true,
            "readonly": false,
            "type": "object",
            "default": "",
            "description": "",
            "deprecated": "since v4.0. Use 'labelStyle' instead.\nInline style of the input field."
        },
        {
            "name": "inputClass",
            "optional": true,
            "readonly": false,
            "type": "string | object",
            "default": "",
            "description": "",
            "deprecated": "since v4.0. Use 'labelClass' instead.\nStyle class of the input field."
        },
        {
            "name": "labelId",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Identifier of the underlying label element."
        },
        {
            "name": "labelStyle",
            "optional": true,
            "readonly": false,
            "type": "object",
            "default": "",
            "description": "Inline style of the label field."
        },
        {
            "name": "labelClass",
            "optional": true,
            "readonly": false,
            "type": "string | object",
            "default": "",
            "description": "Style class of the label field."
        },
        {
            "name": "panelStyle",
            "optional": true,
            "readonly": false,
            "type": "object",
            "default": "",
            "description": "",
            "deprecated": "since v4.0. Use 'overlayStyle' instead.\nInline style of the overlay panel."
        },
        {
            "name": "panelClass",
            "optional": true,
            "readonly": false,
            "type": "string | object",
            "default": "",
            "description": "",
            "deprecated": "since v4.0. Use 'overlayClass' instead.\nStyle class of the overlay panel."
        },
        {
            "name": "overlayStyle",
            "optional": true,
            "readonly": false,
            "type": "object",
            "default": "",
            "description": "Inline style of the overlay."
        },
        {
            "name": "overlayClass",
            "optional": true,
            "readonly": false,
            "type": "string | object",
            "default": "",
            "description": "Style class of the overlay."
        },
        {
            "name": "appendTo",
            "optional": true,
            "readonly": false,
            "type": "HintedString<\"body\" | \"self\"> | HTMLElement",
            "default": "body",
            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
        },
        {
            "name": "loading",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Whether the select is in loading state."
        },
        {
            "name": "clearIcon",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Icon to display in clear button."
        },
        {
            "name": "dropdownIcon",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Icon to display in the select."
        },
        {
            "name": "filterIcon",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Icon to display in filter input."
        },
        {
            "name": "loadingIcon",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Icon to display in loading state."
        },
        {
            "name": "resetFilterOnHide",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Clears the filter value when hiding the select."
        },
        {
            "name": "resetFilterOnClear",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Clears the filter value when clicking on the clear icon."
        },
        {
            "name": "virtualScrollerOptions",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
        },
        {
            "name": "autoOptionFocus",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
        },
        {
            "name": "autoFilterFocus",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Whether to focus on the filter element when the overlay panel is shown."
        },
        {
            "name": "selectOnFocus",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When enabled, the focused option is selected."
        },
        {
            "name": "focusOnHover",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "true",
            "description": "When enabled, the focus is placed on the hovered option."
        },
        {
            "name": "highlightOnSelect",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "true",
            "description": "Whether the selected option will be add highlight class."
        },
        {
            "name": "checkmark",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "Whether the selected option will be shown with a check mark."
        },
        {
            "name": "filterMessage",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "'{0} results are available'",
            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
        },
        {
            "name": "selectionMessage",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "'{0} items selected'",
            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
        },
        {
            "name": "emptySelectionMessage",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "No selected item",
            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
        },
        {
            "name": "emptyFilterMessage",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "No results found",
            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
        },
        {
            "name": "emptyMessage",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "No available options",
            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
        },
        {
            "name": "tabindex",
            "optional": true,
            "readonly": false,
            "type": "string | number",
            "default": "",
            "description": "Index of the element in tabbing order."
        },
        {
            "name": "ariaLabel",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Defines a string value that labels an interactive element."
        },
        {
            "name": "ariaLabelledby",
            "optional": true,
            "readonly": false,
            "type": "string",
            "default": "",
            "description": "Identifier of the underlying input element."
        },
        {
            "name": "dt",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "It generates scoped CSS variables using design tokens for the component."
        },
        {
            "name": "pt",
            "optional": true,
            "readonly": false,
            "type": "PassThrough<SelectPassThroughOptions<any>>",
            "default": "",
            "description": "Used to pass attributes to DOM elements inside the component."
        },
        {
            "name": "ptOptions",
            "optional": true,
            "readonly": false,
            "type": "any",
            "default": "",
            "description": "Used to configure passthrough(pt) options of the component."
        },
        {
            "name": "unstyled",
            "optional": true,
            "readonly": false,
            "type": "boolean",
            "default": "false",
            "description": "When enabled, it removes component related styles in the core."
        }
    ],
    "slots": [
        {
            "name": "value",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">placeholder</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Placeholder prop value</span>\n }",
                    "description": "value slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom value template."
        },
        {
            "name": "header",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                    "description": "header slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom header template of panel."
        },
        {
            "name": "footer",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                    "description": "footer slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom footer template of panel."
        },
        {
            "name": "option",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                    "description": "option slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom option template."
        },
        {
            "name": "optiongroup",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                    "description": "option group slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom option group template."
        },
        {
            "name": "emptyfilter",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom empty filter template."
        },
        {
            "name": "empty",
            "parameters": [],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom empty template."
        },
        {
            "name": "content",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// An array of objects to display for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">styleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">contentRef</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">el</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Referance of the content</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">getItemOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Options of the items</span>\n}",
                    "description": "content slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom content template."
        },
        {
            "name": "loader",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n }",
                    "description": "loader slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom loader template."
        },
        {
            "name": "clearicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">clearCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Clear icon click function.</span>\n}",
                    "description": "clear icon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom clear icon template."
        },
        {
            "name": "dropdownicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the select icon</span>\n }",
                    "description": "select icon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom select icon template."
        },
        {
            "name": "loadingicon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon</span>\n }",
                    "description": "loading icon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom loading icon template."
        },
        {
            "name": "filtericon",
            "parameters": [
                {
                    "name": "scope",
                    "optional": false,
                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the filter icon</span>\n }",
                    "description": "filter icon slot's params."
                }
            ],
            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
            "description": "Custom filter icon template."
        }
    ],
    "emits": [
        {
            "name": "update:modelValue",
            "parameters": [
                {
                    "name": "value",
                    "optional": false,
                    "type": "any",
                    "description": "New value."
                }
            ],
            "returnType": "void",
            "description": "Emitted when the value changes."
        },
        {
            "name": "change",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "SelectChangeEvent",
                    "description": "Custom change event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke on value change."
        },
        {
            "name": "focus",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "Event",
                    "description": "Browser event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when the component receives focus."
        },
        {
            "name": "blur",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "Event",
                    "description": "Browser event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke when the component loses focus."
        },
        {
            "name": "before-show",
            "parameters": [],
            "returnType": "void",
            "description": "Callback to invoke before the overlay is shown."
        },
        {
            "name": "before-hide",
            "parameters": [],
            "returnType": "void",
            "description": "Callback to invoke before the overlay is hidden."
        },
        {
            "name": "show",
            "parameters": [],
            "returnType": "void",
            "description": "Callback to invoke when the overlay is shown."
        },
        {
            "name": "hide",
            "parameters": [],
            "returnType": "void",
            "description": "Callback to invoke when the overlay is hidden."
        },
        {
            "name": "filter",
            "parameters": [
                {
                    "name": "event",
                    "optional": false,
                    "type": "SelectFilterEvent",
                    "description": "Custom filter event."
                }
            ],
            "returnType": "void",
            "description": "Callback to invoke on filter input."
        }
    ],
    "template": "\n<Select v-model=\"selectedCity\" :options=\"cities\" optionLabel=\"name\" placeholder=\"Select a City\" class=\"w-full md:w-56\" />\n"
}